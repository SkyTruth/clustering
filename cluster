#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8 :
# SETUPTOOLS_DO_NOT_WRAP

# cluster rows.csv clusters.csv
#
#  - Copyright (C) 2014 SkyTruth
#    Author: Egil Moeller <egil@skytruth.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import numpy
import sklearn.cluster
import csv
import sys

def loaddata(filename, maxlines=None):
    lines = -1
    with open("viirs_full_data.csv") as f:
         for l in f:
             lines += 1
             if maxlines is not None and lines >= maxlines: break

    X = numpy.zeros((lines, 2))
    with open(filename) as f:
        for idx, row in enumerate(csv.DictReader(f)):
            if idx >= lines: break
            X[idx][0] = float(row['longitude'])
            X[idx][1] = float(row['latitude'])
    return X

args = {
    "eps": 0.013498916666666666,
    "min_samples": 3
    }
files = []
for arg in sys.argv[1:]:
    if arg.startswith("--"):
        arg = arg[2:]
        if '=' in arg:
            arg, value = arg.split("=", 1)
            args[arg] = value
        else:
            args[arg] = True
    else:
        files.append(arg)

X = loaddata(files[0])
db = sklearn.cluster.DBSCAN(**args).fit(X)

with open(files[1], "w") as f:
    f = csv.writer(f)
    f.writerow(["longitude", "latitude", "items"])
    for k in set(db.labels_):
        points = X[(db.labels_ == k).nonzero()]
        f.writerow([numpy.average(points[:,0]), numpy.average(points[:,1]), points.shape[0]])
